// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// xdate     DateTime? @db.Date
// xdatetime DateTime? @db.DateTime(0)

enum Role {
  ADMIN
  AGENT_DRIVER
  AGENT
  ADVERTISER
}

model User {
  id                   Int       @id @default(autoincrement())
  firstName            String
  middleName           String?
  lastName             String
  suffixName           String?
  // dateOfBirth          DateTime  @db.Date
  dateOfBirth          String
  addressLine1         String
  addressLine2         String
  email                String    @unique
  password             String
  role                 Role      @default(AGENT_DRIVER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  driver               Driver?

  @@map("users")
}

model Driver {
  id             Int        @id @default(autoincrement())
  dl             String
  ssn            String
  preferredLoc   String
  dateRegistered String
  dateApproved   String?
  userId         Int        @unique
  user           User       @relation(fields: [userId], references: [id])
  vehicle        Vehicle?
  statistic      Statistic?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("drivers")
}

model Vehicle {
  id           Int        @id @default(autoincrement())
  vehicleMake  String
  vehicleModel String
  vehicleYear  String
  driverId     Int        @unique
  driver       Driver     @relation(fields: [driverId], references: [id])
  statistic    Statistic?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("vehicles")
}

model Statistic {
  id          Int      @id @default(autoincrement())
  earnings    Decimal  @db.Decimal(9, 2)
  milesDriven Decimal  @db.Decimal(9, 2)
  dateStart   String
  dateEnd     String?
  driverId    Int      @unique
  driver      Driver   @relation(fields: [driverId], references: [id])
  vehicleId   Int      @unique
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // deleted     Boolean   @default(false)

  @@map("statistics")
}

model Customer {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  phone            String
  stripeCustomerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // deleted     Boolean   @default(false)

  @@map("customers")
}

model Charges {
  id             Int      @id @default(autoincrement())
  email          String
  amount         Decimal  @db.Decimal(9, 2)
  card_id        String
  description    String
  customer_id    Int
  stripeChargeId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // deleted     Boolean   @default(false)

  @@map("charges")
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  active          Boolean
  default_price   Decimal  @db.Decimal(9, 2)
  stripeProductId String
  stripePriceId   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // deleted     Boolean   @default(false)

  @@map("products")
}
